import { NextRequest, NextResponse } from 'next/server'
import { TELEGRAM_CONFIG } from '@/lib/telegram'

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'
export const revalidate = 0

function getAppUrl(req: NextRequest): string {
  const fromEnv = process.env.NEXT_PUBLIC_APP_URL
  if (fromEnv) return fromEnv
  const proto = req.headers.get('x-forwarded-proto') || 'https'
  const host = req.headers.get('host') || ''
  return `${proto}://${host}`
}

export async function POST(req: NextRequest) {
  try {
    const update = await req.json()
    const token = TELEGRAM_CONFIG.BOT_TOKEN
    if (!token) return NextResponse.json({ ok: false, error: 'BOT_TOKEN missing' }, { status: 500 })

    // Helpers
    const sendWelcome = async (chatId: number | string) => {
      const appUrl = getAppUrl(req)
      const photoUrl = 'https://i.ibb.co/Dg8f0QyM/97-EEDBE6-0482-43-B8-B47-C-92584-E7-B19-DD.png'
      const caption = [
        'üéä <b>LABUBU –†–£–õ–ï–¢–ö–ê</b> ‚Äî –≤—ã–∏–≥—Ä–∞–π –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–∏–∑—ã!',
        '',
        'üß∏ –°–æ–±–µ—Ä–∏ 4 —á–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–ø–∏ –õ–ê–ë–£ –∏ –æ–±–º–µ–Ω—è–π –Ω–∞ –∏–≥—Ä—É—à–∫—É.',
        '‚ö° –ß–µ—Å—Ç–Ω—ã–µ —à–∞–Ω—Å—ã, –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã.',
      ].join('\n')
      const kb = {
        inline_keyboard: [[
          { text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: appUrl } }
        ], [
          { text: 'üìú –ü—Ä–∞–≤–∏–ª–∞', callback_data: 'rules' },
          { text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/pavel_xdev' }
        ]]
      }
      const form = new FormData()
      form.set('chat_id', String(chatId))
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∫–∞–∫ –ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      form.set('photo', photoUrl)
      form.set('caption', caption)
      form.set('parse_mode', 'HTML')
      form.set('reply_markup', JSON.stringify(kb))
      const tgRes = await fetch(`https://api.telegram.org/bot${token}/sendPhoto`, { method: 'POST', body: form as any })
      const bodyText = await tgRes.text().catch(() => '')
      if (!tgRes.ok) {
        console.error('Telegram sendPhoto failed', tgRes.status, bodyText)
      } else {
        try { const parsed = JSON.parse(bodyText); if (!parsed.ok) console.error('Telegram API error', parsed) } catch {}
      }
    }

    // React to /start and also to any first message
    const msg = update?.message
    const text: string | undefined = msg?.text
    const entities: any[] | undefined = msg?.entities
    const hasStartEntity = !!entities?.some(e => {
      try {
        if (e.type !== 'bot_command') return false
        const cmd = text?.substring(e.offset, e.offset + e.length)
        return cmd === '/start'
      } catch { return false }
    })
    // –î–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ —à–ª—ë–º –ø—Ä–∏–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –ø–µ—Ä–≤—ã–π –º–µ—Å—Å–µ–¥–∂, –∏ —Ç–æ—á–Ω–æ –Ω–∞ /start
    if (msg && (hasStartEntity || (text && text.toLowerCase().startsWith('/start')) || text)) {
      await sendWelcome(msg.chat.id)
    }
    // Handle callback_query presses (e.g., user tapped button again)
    const callback = update?.callback_query
    if (callback) {
      const chatId = callback.message?.chat.id || callback.from.id
      const data = callback.data
      try {
        // acknowledge to stop spinner
        await fetch(`https://api.telegram.org/bot${token}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ callback_query_id: callback.id })
        })
      } catch {}
      if (data === 'rules') {
        const rules = [
          '<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã Labubu Roulette</b>',
          '',
          '‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏–Ω–∞: 120‚ÇΩ (–æ–±—ã—á–Ω—ã–π) / 199‚ÇΩ (–ø—Ä–µ–º–∏—É–º, x2 —à–∞–Ω—Å –Ω–∞ —á–∞—Å—Ç–∏).',
          '‚Ä¢ –ù–∞ –∫–æ–ª–µ—Å–µ 12 —Å–µ–∫—Ç–æ—Ä–æ–≤: 4 —á–∞—Å—Ç–∏ –æ–±—ã—á–Ω—ã–µ, 4 —á–∞—Å—Ç–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤, –∏ –õ–ê–ë–£.',
          '‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç—ã —á–∞—Å—Ç–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –Ω–∞ <b>200 –õ–ê–ë–£</b>.',
          '‚Ä¢ –õ–ê–ë–£ ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞, –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è, –∫–æ–ø–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
          '',
          '<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑</b>',
          '1) –°–æ–±–µ—Ä–∏ 4 —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ ‚Äî –∏–≥—Ä—É—à–∫–∞ Labubu (–∞–≤—Ç–æ-–∑–∞—á—ë—Ç).',
          '2) –ù–∞–∫–æ–ø–∏ –õ–ê–ë–£ –∏ –æ–±–º–µ–Ω—è–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ.',
          '',
          '<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã</b>',
          '‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–≤–æ–µ–º—É –∫–æ–¥—É: +500 –õ–ê–ë–£.',
          '‚Ä¢ –î–µ–ª–∞–µ—Ç 1 —Å–ø–∏–Ω: +1000 –õ–ê–ë–£.',
          '‚Ä¢ –î–µ–ª–∞–µ—Ç 10 —Å–ø–∏–Ω–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ: +2500 –õ–ê–ë–£.',
          '‚Ä¢ –°–æ–±–∏—Ä–∞–µ—Ç 4 —á–∞—Å—Ç–∏: +3000 –õ–ê–ë–£.',
          '',
          '–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∏ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –í—Å–µ —Å–ø–∏–Ω—ã –∏ –±–∞–ª–∞–Ω—Å—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.',
          '',
          '–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @pavel_xdev'
        ].join('\n')
        const form = new FormData()
        form.set('chat_id', String(chatId))
        form.set('text', rules)
        form.set('parse_mode', 'HTML')
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const backKb = { inline_keyboard: [[[{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'home' }]]] }
        form.set('reply_markup', JSON.stringify(backKb))
        const tgRes = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, { method: 'POST', body: form as any })
        const bodyText = await tgRes.text().catch(() => '')
        if (!tgRes.ok) console.error('Telegram sendMessage rules failed', tgRes.status, bodyText)
      } else if (data === 'home') {
        await sendWelcome(chatId)
      } else {
        await sendWelcome(chatId)
      }
    }
    // Some clients send my_chat_member when user starts chat; reply to greet anyway
    const membership = update?.my_chat_member
    if (membership) {
      await sendWelcome(membership.chat.id)
    }
    return NextResponse.json({ ok: true })
  } catch (e) {
    console.error('telegram webhook error', e)
    return NextResponse.json({ ok: false }, { status: 200 })
  }
}

