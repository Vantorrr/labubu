import { NextRequest, NextResponse } from 'next/server'
import { TELEGRAM_CONFIG } from '@/lib/telegram'

function getAppUrl(req: NextRequest): string {
  const fromEnv = process.env.NEXT_PUBLIC_APP_URL
  if (fromEnv) return fromEnv
  const proto = req.headers.get('x-forwarded-proto') || 'https'
  const host = req.headers.get('host') || ''
  return `${proto}://${host}`
}

export async function POST(req: NextRequest) {
  try {
    const update = await req.json()
    const token = TELEGRAM_CONFIG.BOT_TOKEN
    if (!token) return NextResponse.json({ ok: false, error: 'BOT_TOKEN missing' }, { status: 500 })

    // Only react to /start
    const msg = update?.message
    const text: string | undefined = msg?.text
    if (msg && text && text.startsWith('/start')) {
      const chatId = msg.chat.id
      const appUrl = getAppUrl(req)
      const photo = 'https://i.ibb.co/CtBz5Mq/1JdGFT5X.png'
      const caption = [
        'üéä <b>LABUBU –†–£–õ–ï–¢–ö–ê</b> ‚Äî –≤—ã–∏–≥—Ä–∞–π –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–∏–∑—ã!',
        '',
        'üß∏ –°–æ–±–µ—Ä–∏ 4 —á–∞—Å—Ç–∏ –∏–ª–∏ –∫–æ–ø–∏ –õ–ê–ë–£ –∏ –æ–±–º–µ–Ω—è–π –Ω–∞ –∏–≥—Ä—É—à–∫—É.',
        '‚ö° –ß–µ—Å—Ç–Ω—ã–µ —à–∞–Ω—Å—ã, –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã.',
      ].join('\n')
      const kb = {
        inline_keyboard: [[
          { text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: appUrl } }
        ], [
          { text: 'üìú –ü—Ä–∞–≤–∏–ª–∞', url: `${appUrl}#rules` },
          { text: 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/pavel_xdev' }
        ]]
      }
      const form = new FormData()
      form.set('chat_id', String(chatId))
      form.set('photo', photo)
      form.set('caption', caption)
      form.set('parse_mode', 'HTML')
      form.set('reply_markup', JSON.stringify(kb))
      await fetch(`https://api.telegram.org/bot${token}/sendPhoto`, { method: 'POST', body: form as any })
    }
    return NextResponse.json({ ok: true })
  } catch (e) {
    console.error('telegram webhook error', e)
    return NextResponse.json({ ok: false }, { status: 200 })
  }
}

